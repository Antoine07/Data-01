{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'bonjour tout le monde'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = \"bonjour tout le monde\"\n",
    "type(a)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Bonjour le monde'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = \"Bonjour le \" + \"monde\"\n",
    "\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'> <class 'str'> <class 'bool'> <class 'float'>\n",
      "a: 7 b: 5\n"
     ]
    }
   ],
   "source": [
    "\n",
    "a = 1\n",
    "b = \"Bonjour\"\n",
    "c = True\n",
    "d = 5.5\n",
    "\n",
    "print( type(a), type(b), type(c), type(d) )\n",
    "\n",
    "a = 5\n",
    "b = 7\n",
    "\n",
    "tmp = a\n",
    "a = b\n",
    "b = tmp\n",
    "\n",
    "print(\"a:\", a,\"b:\", b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a: 7 b: 5\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a = 5\n",
    "b = 7\n",
    "\n",
    "#  a = 5 + 7 = 12\n",
    "a = a+b\n",
    "\n",
    "# b = 12 - 7 = 5\n",
    "b = a-b\n",
    "\n",
    "# a = 12 - 5 = 7\n",
    "a = a-b\n",
    "\n",
    "print(\"a:\", a,\"b:\", b)\n",
    "print( 1 < 10 )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "Bonjour le monde\n",
      "\n"
     ]
    }
   ],
   "source": [
    "message = \"Bonjour le monde\" + \"\\n\"\n",
    "\n",
    "print(message * 10 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print( False and p )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p1 True\n",
      "p2 True\n",
      "p3 True\n",
      "p4 False\n"
     ]
    }
   ],
   "source": [
    "a = 2 > 1\n",
    "b = 3 < 1\n",
    "\n",
    "p1 = a and b or a\n",
    "\n",
    "\"\"\"\n",
    "    True and False or True --> False or True\n",
    "\"\"\"\n",
    "\n",
    "print('p1', p1)\n",
    "\n",
    "p2 = a and ( b or a )\n",
    "\n",
    "\n",
    "\"\"\"\n",
    " True and ( False or True ) = True and True = True\n",
    "\"\"\"\n",
    "\n",
    "print('p2', p2)\n",
    "\n",
    "p3 = (not (a ) or not (b) ) and a or (a and b) \n",
    "\n",
    "\"\"\"\n",
    " (False or True) and True or ( True and False )\n",
    " \n",
    " True and True or False\n",
    " \n",
    " True or False\n",
    " \n",
    " True\n",
    " \n",
    "\"\"\"\n",
    "\n",
    "print('p3', p3)\n",
    "\n",
    "p4 = (not(a) or not(b) ) and not(a and not(b ))\n",
    "\n",
    "\"\"\"\n",
    "( not(True) or not(False)) and not( True and not(False) )\n",
    "\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "print('p4', p4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 True\n",
      "True True\n",
      "nombre positif True\n",
      "nombre negatif True\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "bool(0)\n",
    "print('1', bool(1))\n",
    "\n",
    "print('True', True )\n",
    "\n",
    "print('nombre positif', bool(3) )\n",
    "\n",
    "print('nombre negatif', bool(-10) )\n",
    "\n",
    "print( True and 0 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "Le nombre  25  n'est pas divisible par 7\n"
     ]
    }
   ],
   "source": [
    "nombre_1 = 25\n",
    "nombre_2 = 7\n",
    "\n",
    "resultat = nombre_1 % nombre_2\n",
    "\n",
    "# Python évalue vrai un nombre différent de 0\n",
    "# Python évalue comme faux un nombre égale à 0\n",
    "print(bool(0))\n",
    "print(bool(3))\n",
    "\n",
    "if not ( bool(resultat) ) :\n",
    "    print(\"Le nombre \", nombre_1, \" est divisible par\", nombre_2)\n",
    "\n",
    "else:\n",
    "    print(\"Le nombre \", nombre_1, \" n'est pas divisible par\", nombre_2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
